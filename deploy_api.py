import torch
import torchvision.transforms as transforms
from PIL import Image
from torchvision.models import resnet18
import torch.nn.functional as F
import base64
import io
from model.plant import PlantInfo
from model.result import Result
import wiki_api

import json
from flask import Flask, request, jsonify

import random

tranform_train = transforms.Compose([transforms.Resize(size=256), transforms.RandomCrop(size=224),transforms.ToTensor(), transforms.Normalize(mean=[0.485, 0.456, 0.406],std=[0.229, 0.224, 0.225])])
plant_code = {0: '1355868', 1: '1355920', 2: '1355932', 3: '1355936', 4: '1355937', 5: '1355955', 6: '1355959', 7: '1355961', 8: '1355978', 9: '1355990', 10: '1356003', 11: '1356022', 12: '1356037', 13: '1356055', 14: '1356075', 15: '1356076', 16: '1356111', 17: '1356126', 18: '1356138', 19: '1356257', 20: '1356278', 21: '1356279', 22: '1356309', 23: '1356379', 24: '1356380', 25: '1356382', 26: '1356420', 27: '1356421', 28: '1356428', 29: '1356469', 30: '1356692', 31: '1356781', 32: '1356816', 33: '1356847', 34: '1356901', 35: '1357330', 36: '1357331', 37: '1357367', 38: '1357367', 39: '1357506', 40: '1357635', 41: '1357652', 42: '1357677', 43: '1357681', 44: '1357682', 45: '1357705', 46: '1358094', 47: '1358095', 48: '1358096', 49: '1358096', 50: '1358099', 51: '1358101', 52: '1358102', 53: '1358096', 54: '1358105', 55: '1358108', 56: '1358096', 57: '1358119', 58: '1358096', 59: '1358132', 60: '1358096', 61: '1358150', 62: '1358193', 63: '1358302', 64: '1358365', 65: '1358519', 66: '1358605', 67: '1358608', 68: '1358689', 69: '1356022', 70: '1358691', 71: '1356022', 72: '1358699', 73: '1358700', 74: '1358701', 75: '1356022', 76: '1358704', 77: '1356022', 78: '1358710', 79: '1358711', 80: '1358748', 81: '1358749', 82: '1358749', 83: '1358751', 84: '1358751', 85: '1358755', 86: '1358759', 87: '1358760', 88: '1358766', 89: '1359060', 90: '1359064', 91: '1359065', 92: '1359197', 93: '1359331', 94: '1359331', 95: '1359359', 96: '1359364', 97: '1359483', 98: '1359485', 99: '1359486', 100: '1359488', 101: '1359489', 102: '1359495', 103: '1359497', 104: '1359498', 105: '1359502', 106: '1359505', 107: '1359505', 108: '1359508', 109: '1359510', 110: '1359513', 111: '1359505', 112: '1359517', 113: '1359505', 114: '1359519', 115: '1359521', 116: '1359505', 117: '1359505', 118: '1359525', 119: '1359526', 120: '1359528', 121: '1359530', 122: '1359616', 123: '1359620', 124: '1359622', 125: '1359625', 126: '1359669', 127: '1359806', 128: '1359815', 129: '1359821', 130: '1360004', 131: '1360147', 132: '1360148', 133: '1360150', 134: '1360152', 135: '1360153', 136: '1360154', 137: '1360427', 138: '1360550', 139: '1360555', 140: '1360588', 141: '1360590', 142: '1360591', 143: '1360618', 144: '1360671', 145: '1360687', 146: '1360759', 147: '1360808', 148: '1360811', 149: '1360835', 150: '1360838', 151: '1360976', 152: '1360978', 153: '1360998', 154: '1361024', 155: '1361233', 156: '1361316', 157: '1361357', 158: '1361507', 159: '1361507', 160: '1361524', 161: '1361655', 162: '1361656', 163: '1361658', 164: '1361660', 165: '1361663', 166: '1361666', 167: '1361668', 168: '1361672', 169: '1361704', 170: '1361745', 171: '1361759', 172: '1361823', 173: '1361824', 174: '1361847', 175: '1361850', 176: '1361891', 177: '1362024', 178: '1362064', 179: '1362080', 180: '1362192', 181: '1362294', 182: '1362385', 183: '1362398', 184: '1362434', 185: '1362434', 186: '1362489', 187: '1362490', 188: '1362516', 189: '1362582', 190: '1362834', 191: '1362927', 192: '1362928', 193: '1362954', 194: '1363016', 195: '1363019', 196: '1363021', 197: '1363110', 198: '1363117', 199: '1359815', 200: '1363127', 201: '1363128', 202: '1363129', 203: '1363130', 204: '1363227', 205: '1363336', 206: '1363343', 207: '1363359', 208: '1363451', 209: '1363463', 210: '1363464', 211: '1363489', 212: '1363490', 213: '1363491', 214: '1363492', 215: '1363493', 216: '1363613', 217: '1363688', 218: '1363699', 219: '1363700', 220: '1363701', 221: '1363703', 222: '1363735', 223: '1363737', 224: '1363738', 225: '1363739', 226: '1363740', 227: '1363743', 228: '1363749', 229: '1363750', 230: '1363764', 231: '1363769', 232: '1363770', 233: '1363772', 234: '1363778', 235: '1363871', 236: '1363872', 237: '1363970', 238: '1363991', 239: '1364000', 240: '1364099', 241: '1364112', 242: '1364158', 243: '1364159', 244: '1364161', 245: '1364164', 246: '1364165', 247: '1364172', 248: '1364173', 249: '1364440', 250: '1364512', 251: '1365712', 252: '1365961', 253: '1366875', 254: '1366898', 255: '1366899', 256: '1366997', 257: '1367060', 258: '1367060', 259: '1367060', 260: '1367060', 261: '1367369', 262: '1367431', 263: '1367432', 264: '1367781', 265: '1367784', 266: '1367921', 267: '1367938', 268: '1367949', 269: '1367998', 270: '1369472', 271: '1369887', 272: '1369960', 273: '1370279', 274: '1370991', 275: '1370991', 276: '1371680', 277: '1371691', 278: '1372016', 279: '1372602', 280: '1355959', 281: '1394453', 282: '1394453', 283: '1373530', 284: '1373535', 285: '1374048', 286: '1374448', 287: '1374450', 288: '1374466', 289: '1374933', 290: '1375776', 291: '1375776', 292: '1375895', 293: '1375895', 294: '1375965', 295: '1375966', 296: '1376366', 297: '1376703', 298: '1376726', 299: '1379303', 300: '1379513', 301: '1379556', 302: '1379585', 303: '1380874', 304: '1380904', 305: '1381173', 306: '1381468', 307: '1382099', 308: '1383149', 309: '1383772', 310: '1383774', 311: '1384199', 312: '1384482', 313: '1384485', 314: '1384497', 315: '1384499', 316: '1384500', 317: '1384760', 318: '1385700', 319: '1385701', 320: '1385749', 321: '1385853', 322: '1385937', 323: '1387107', 324: '1387284', 325: '1387687', 326: '1387727', 327: '1388905', 328: '1388911', 329: '1389016', 330: '1389031', 331: '1389044', 332: '1389078', 333: '1389230', 334: '1389231', 335: '1356420', 336: '1389297', 337: '1389307', 338: '1389308', 339: '1389426', 340: '1389442', 341: '1389492', 342: '1389510', 343: '1389553', 344: '1389567', 345: '1389628', 346: '1389630', 347: '1394072', 348: '1389921', 349: '1362928', 350: '1390617', 351: '1364161', 352: '1357367', 353: '1357367', 354: '1391110', 355: '1391112', 356: '1391113', 357: '1357506', 358: '1357506', 359: '1391190', 360: '1391192', 361: '1391193', 362: '1391192', 363: '1357506', 364: '1357506', 365: '1391209', 366: '1357506', 367: '1391226', 368: '1391235', 369: '1357506', 370: '1391326', 371: '1391483', 372: '1391498', 373: '1391498', 374: '1391529', 375: '1391530', 376: '1391648', 377: '1391649', 378: '1391652', 379: '1391654', 380: '1391762', 381: '1391797', 382: '1391805', 383: '1391807', 384: '1391809', 385: '1391810', 386: '1356382', 387: '1391868', 388: '1391953', 389: '1391960', 390: '1391961', 391: '1391962', 392: '1391963', 393: '1391964', 394: '1391967', 395: '1392093', 396: '1392094', 397: '1392096', 398: '1360838', 399: '1392361', 400: '1362582', 401: '1392418', 402: '1358150', 403: '1392601', 404: '1392653', 405: '1369472', 406: '1364112', 407: '1392689', 408: '1392690', 409: '1392690', 410: '1392695', 411: '1392730', 412: '1392777', 413: '1393241', 414: '1393242', 415: '1393245', 416: '1393248', 417: '1393250', 418: '1356022', 419: '1393254', 420: '1356022', 421: '1393294', 422: '1393322', 423: '1393393', 424: '1393414', 425: '1393416', 426: '1393418', 427: '1393423', 428: '1393425', 429: '1393449', 430: '1393450', 431: '1358759', 432: '1393466', 433: '1393537', 434: '1393614', 435: '1393654', 436: '1359331', 437: '1393725', 438: '1393789', 439: '1363750', 440: '1363750', 441: '1355990', 442: '1393823', 443: '1393846', 444: '1393846', 445: '1393851', 446: '1393933', 447: '1393945', 448: '1393946', 449: '1393965', 450: '1393967', 451: '1393968', 452: '1393980', 453: '1393981', 454: '1394072', 455: '1394073', 456: '1394077', 457: '1394077', 458: '1394082', 459: '1394077', 460: '1394073', 461: '1394077', 462: '1394073', 463: '1361660', 464: '1394077', 465: '1394073', 466: '1394073', 467: '1394077', 468: '1394077', 469: '1394313', 470: '1360154', 471: '1394382', 472: '1394383', 473: '1360154', 474: '1394396', 475: '1394399', 476: '1394401', 477: '1394404', 478: '1359815', 479: '1394399', 480: '1394418', 481: '1394420', 482: '1394453', 483: '1394454', 484: '1355959', 485: '1394457', 486: '1394460', 487: '1394489', 488: '1394498', 489: '1394502', 490: '1394504', 491: '1394508', 492: '1394513', 493: '1394549', 494: '1394549', 495: '1394591', 496: '1394648', 497: '1394714', 498: '1394759', 499: '1394994', 500: '1394995', 501: '1395391', 502: '1395720', 503: '1395721', 504: '1395722', 505: '1396133', 506: '1396134', 507: '1396143', 508: '1358096', 509: '1358096', 510: '1396156', 511: '1396159', 512: '1396161', 513: '1396165', 514: '1396708', 515: '1396713', 516: '1396754', 517: '1396754', 518: '1396823', 519: '1396824', 520: '1396842', 521: '1396843', 522: '1359505', 523: '1396867', 524: '1359505', 525: '1397208', 526: '1397209', 527: '1397268', 528: '1397269', 529: '1397303', 530: '1397305', 531: '1397311', 532: '1397312', 533: '1397313', 534: '1397349', 535: '1397351', 536: '1397352', 537: '1397364', 538: '1397379', 539: '1397387', 540: '1397403', 541: '1397407', 542: '1397408', 543: '1397420', 544: '1358096', 545: '1397510', 546: '1397514', 547: '1397515', 548: '1358095', 549: '1397551', 550: '1362582', 551: '1397585', 552: '1397598', 553: '1397613', 554: '1397841', 555: '1397959', 556: '1398041', 557: '1398111', 558: '1394077', 559: '1398128', 560: '1398130', 561: '1356076', 562: '1398196', 563: '1398274', 564: '1398326', 565: '1398333', 566: '1394077', 567: '1398444', 568: '1398447', 569: '1398469', 570: '1398480', 571: '1398494', 572: '1398513', 573: '1356022', 574: '1398526', 575: '1398567', 576: '1389630', 577: '1398608', 578: '1398615', 579: '1398700', 580: '1398805', 581: '1398830', 582: '1399063', 583: '1399141', 584: '1399145', 585: '1399157', 586: '1399231', 587: '1399338', 588: '1399384', 589: '1399667', 590: '1362954', 591: '1399803', 592: '1399804', 593: '1399920', 594: '1400060', 595: '1400080', 596: '1400081', 597: '1400096', 598: '1400100', 599: '1400104', 600: '1400110', 601: '1400471', 602: '1400478', 603: '1400798', 604: '1400844', 605: '1401141', 606: '1401141', 607: '1401211', 608: '1401211', 609: '1401211', 610: '1401242', 611: '1401701', 612: '1401711', 613: '1401718', 614: '1401735', 615: '1401736', 616: '1401737', 617: '1401883', 618: '1402303', 619: '1402356', 620: '1402423', 621: '1402433', 622: '1402464', 623: '1402576', 624: '1402811', 625: '1402920', 626: '1402921', 627: '1402924', 628: '1402925', 629: '1402926', 630: '1403272', 631: '1403479', 632: '1403654', 633: '1403826', 634: '1403967', 635: '1404002', 636: '1387687', 637: '1404745', 638: '1400844', 639: '1404804', 640: '1405061', 641: '1405088', 642: '1405252', 643: '1356279', 644: '1405653', 645: '1405685', 646: '1405686', 647: '1367060', 648: '1406426', 649: '1406486', 650: '1400844', 651: '1406863', 652: '1400844', 653: '1407379', 654: '1407873', 655: '1407874', 656: '1408034', 657: '1408037', 658: '1408041', 659: '1408045', 660: '1408066', 661: '1408071', 662: '1392361', 663: '1408107', 664: '1408160', 665: '1356022', 666: '1408227', 667: '1408284', 668: '1371680', 669: '1408401', 670: '1408421', 671: '1408451', 672: '1394453', 673: '1408490', 674: '1408502', 675: '1408507', 676: '1375895', 677: '1375895', 678: '1408557', 679: '1408594', 680: '1362954', 681: '1375776', 682: '1375776', 683: '1408727', 684: '1408734', 685: '1408738', 686: '1362927', 687: '1408788', 688: '1408810', 689: '1408812', 690: '1408845', 691: '1408869', 692: '1408874', 693: '1408953', 694: '1408961', 695: '1408979', 696: '1405252', 697: '1373530', 698: '1409195', 699: '1409214', 700: '1409215', 701: '1402921', 702: '1409238', 703: '1409239', 704: '1409283', 705: '1409292', 706: '1409295', 707: '1356309', 708: '1409299', 709: '1409328', 710: '1409407', 711: '1367060', 712: '1367060', 713: '1409550', 714: '1409551', 715: '1409552', 716: '1409586', 717: '1409642', 718: '1409705', 719: '1409746', 720: '1409824', 721: '1409834', 722: '1409839', 723: '1375895', 724: '1398333', 725: '1409932', 726: '1410024', 727: '1410025', 728: '1410147', 729: '1410168', 730: '1411423', 731: '1411462', 732: '1357506', 733: '1411469', 734: '1411472', 735: '1411520', 736: '1411524', 737: '1411687', 738: '1411700', 739: '1411760', 740: '1391805', 741: '1391807', 742: '1411832', 743: '1411833', 744: '1364000', 745: '1411925', 746: '1412311', 747: '1412313', 748: '1412314', 749: '1412337', 750: '1412344', 751: '1412368', 752: '1412410', 753: '1389044', 754: '1412413', 755: '1393425', 756: '1412444', 757: '1412445', 758: '1412595', 759: '1412596', 760: '1412659', 761: '1412661', 762: '1412662', 763: '1412663', 764: '1412697', 765: '1412698', 766: '1412699', 767: '1412740', 768: '1412745', 769: '1412831', 770: '1412833', 771: '1412834', 772: '1412888', 773: '1412889', 774: '1412946', 775: '1412992', 776: '1413002', 777: '1413013', 778: '1394994', 779: '1413751', 780: '1413752', 781: '1413753', 782: '1413755', 783: '1413757', 784: '1413832', 785: '1413835', 786: '1414057', 787: '1414058', 788: '1414272', 789: '1414275', 790: '1400100', 791: '1414397', 792: '1414746', 793: '1414808', 794: '1408160', 795: '1414924', 796: '1415584', 797: '1415584', 798: '1415911', 799: '1416420', 800: '1416509', 801: '1417117', 802: '1417506', 803: '1405088', 804: '1417900', 805: '1417916', 806: '1418033', 807: '1418061', 808: '1418084', 809: '1418102', 810: '1418140', 811: '1418146', 812: '1418191', 813: '1418192', 814: '1418295', 815: '1418345', 816: '1418475', 817: '1396156', 818: '1418546', 819: '1418547', 820: '1418563', 821: '1418576', 822: '1418653', 823: '1398196', 824: '1418659', 825: '1418665', 826: '1418732', 827: '1418984', 828: '1419077', 829: '1419086', 830: '1419091', 831: '1419112', 832: '1419115', 833: '1419173', 834: '1419197', 835: '1419334', 836: '1393537', 837: '1419595', 838: '1419598', 839: '1419612', 840: '1419713', 841: '1417117', 842: '1387687', 843: '1419864', 844: '1419874', 845: '1409214', 846: '1419924', 847: '1392690', 848: '1419949', 849: '1394714', 850: '1420288', 851: '1397613', 852: '1420365', 853: '1379556', 854: '1420544', 855: '1420653', 856: '1420700', 857: '1420767', 858: '1420781', 859: '1420787', 860: '1420792', 861: '1420795', 862: '1420796', 863: '1393393', 864: '1409283', 865: '1420929', 866: '1420931', 867: '1394453', 868: '1360978', 869: '1398128', 870: '1421026', 871: '1408045', 872: '1421386', 873: '1421523', 874: '1408401', 875: '1356076', 876: '1422636', 877: '1422712', 878: '1422721', 879: '1374466', 880: '1423469', 881: '1423633', 882: '1408160', 883: '1424003', 884: '1424005', 885: '1424377', 886: '1425433', 887: '1425899', 888: '1427043', 889: '1427659', 890: '1427821', 891: '1428059', 892: '1430280', 893: '1430287', 894: '1430515', 895: '1431222', 896: '1431925', 897: '1432545', 898: '1355868', 899: '1364161', 900: '1432824', 901: '1433158', 902: '1433176', 903: '1433496', 904: '1419334', 905: '1434232', 906: '1434249', 907: '1434258', 908: '1434267', 909: '1359331', 910: '1434326', 911: '1434383', 912: '1424003', 913: '1434594', 914: '1396708', 915: '1435225', 916: '1435228', 917: '1435260', 918: '1394453', 919: '1355978', 920: '1436922', 921: '1436923', 922: '1437724', 923: '1438033', 924: '1438041', 925: '1438043', 926: '1358096', 927: '1358096', 928: '1438052', 929: '1438056', 930: '1438352', 931: '1438354', 932: '1438358', 933: '1438616', 934: '1438868', 935: '1396823', 936: '1439703', 937: '1440273', 938: '1440412', 939: '1440416', 940: '1440423', 941: '1440425', 942: '1440440', 943: '1440446', 944: '1440476', 945: '1441099', 946: '1441349', 947: '1441375', 948: '1441410', 949: '1442541', 950: '1442833', 951: '1442865', 952: '1408037', 953: '1444049', 954: '1444156', 955: '1444195', 956: '1444216', 957: '1447962', 958: '1449139', 959: '1449149', 960: '1453004', 961: '1400844', 962: '1460343', 963: '1463177', 964: '1464023', 965: '1464054', 966: '1464075', 967: '1464086', 968: '1464088', 969: '1464459', 970: '1402433', 971: '1402433', 972: '1465026', 973: '1465149', 974: '1465170', 975: '1470435', 976: '1486475', 977: '1486501', 978: '1486655', 979: '1488001', 980: '1488026', 981: '1410024', 982: '1488206', 983: '1488285', 984: '1491513', 985: '1494482', 986: '1497434', 987: '1396823', 988: '1497667', 989: '1361759', 990: '1506976', 991: '1393414', 992: '1513780', 993: '1514035', 994: '1424005', 995: '1516297', 996: '1518683', 997: '1438868', 998: '1522377', 999: '1529081', 1000: '1358096', 1001: '1418547', 1002: '1529124', 1003: '1358096', 1004: '1358096', 1005: '1358096', 1006: '1358096', 1007: '1358096', 1008: '1358096', 1009: '1358096', 1010: '1529081', 1011: '1529305', 1012: '1389307', 1013: '1535203', 1014: '1538569', 1015: '1375776', 1016: '1394453', 1017: '1419115', 1018: '1550785', 1019: '1550799', 1020: '1358755', 1021: '1408227', 1022: '1568056', 1023: '1568102', 1024: '1568134', 1025: '1568144', 1026: '1408594', 1027: '1389567', 1028: '1576296', 1029: '1398526', 1030: '1584568', 1031: '1600531', 1032: '1608001', 1033: '1420931', 1034: '1608023', 1035: '1608027', 1036: '1608034', 1037: '1608440', 1038: '1617292', 1039: '1617904', 1040: '1417117', 1041: '1618570', 1042: '1618661', 1043: '1621823', 1044: '1638998', 1045: '1643184', 1046: '1643341', 1047: '1643349', 1048: '1643491', 1049: '1643553', 1050: '1643690', 1051: '1643184', 1052: '1643866', 1053: '1643887', 1054: '1644145', 1055: '1644223', 1056: '1392689', 1057: '1662426', 1058: '1360154', 1059: '1663381', 1060: '1394420', 1061: '1420365', 1062: '1675513', 1063: '1682159', 1064: '1363336', 1065: '1694631', 1066: '1697960', 1067: '1697991', 1068: '1697960', 1069: '1711751', 1070: '1711753', 1071: '1358759', 1072: '1397364', 1073: '1405252', 1074: '1400844', 1075: '1712019', 1076: '1712365', 1077: '1409407', 1078: '1409407', 1079: '1717570', 1080: '1718287'}

species_name = json.load(open('./data/plantnet300K_species_id_2_name.json'))
info = json.load(open('./data/plant_info.json'))
image_name = json.load(open('./data/plant_image.json'))

app = Flask(__name__)


def getWikiInfo(plantName):
    search_results = wiki_api.search(plantName)
    plantInfo = wiki_api.getInfo(search_results[0])

    return plantInfo

# Prediction
@app.route('/plant/predict', methods=['POST'])
def prediction():
    model.eval()
    result_array = []
    features = request.json
    image = features['image']
    decoded_image = base64.b64decode(image)
    np_image = Image.open(io.BytesIO(decoded_image))
    
    transformed_image = tranform_train(np_image).unsqueeze(0)
    prediction = model(transformed_image)
    prob = F.softmax(prediction, dim=1)[0]
    top_conf, top_index = prob.sort(descending = True)
    i = 0

    while len(result_array) < 3:
        index = int(top_index[i])
        i += 1
        code = plant_code[index]
        
        # Nếu trùng loại cây
        match_index = None
        for result in result_array:
            if result['id']==int(code):
                match_index = int(code)
        if match_index != None:
            continue

        # Lấy thông tin cây
        plantName = species_name[code]
        conf = int(top_conf[i]*10000)
        image = image_name[code]
        if conf == 0:
            break
        for pkey, pvalue in plant_code.items():
            if pvalue == code and pkey != index:
                conf += int(top_conf[pkey]*10000)
        result = Result(int(code), plantName, conf, image)
        result_array.append(result.__dict__)
    sorted_array = sorted(result_array, key=lambda x: x['conf'], reverse=True)
    data = {
        'data':  sorted_array
    }
    print(data)
    return data

@app.route('/plant/search', methods=['POST'])
def search():
    result_array = []
    features = request.json
    keyword = features['keyword'].lower().strip()
    ownerId = features['ownerId']
    
    print(keyword)
    if keyword != "":
        for code, name in species_name.items():
            if keyword in name.lower():
                for i in info:
                    if i['id'] == int(code) and (i.get('ownerId') is None or i.get('ownerId') == ownerId):
                        result = Result(int(code), name, 0, image_name[code])
                        result_array.append(result.__dict__)
    data = {
    	'data':  result_array
    }
    print(data)
    return data

@app.route('/plant/info/<string:code>', methods=['POST'])
def getInfo(code):
    name = species_name[code]
    plantInfo = PlantInfo()
    plantInfo.setTitle(name)
    plantInfo.setImage(image_name[code])
    for i in info:
        if int(code) == i['id']:
            plantInfo.setCareGuide(i)
            if i.get('desc') is not None:
                plantInfo.desc = i['desc']
            break
    if plantInfo.desc == "":
        plantInfo.desc = getWikiInfo(name).desc
    return plantInfo.__dict__

@app.route('/plant/newId', methods=['POST'])
def createNewId():
    plantID = random.randrange(0,99999999)
    while str(plantID) not in species_name:
        plantID = random.randrange(0,99999999)

    data = {
    	'id':  plantID
    }
    return data

@app.route('/plant/create', methods=['POST'])
def createPlant():
    features = request.json

    plantID = features['id']
    latin = features['latin']
    image_link = features['image_link']
    ownerId = features['ownerId']
    
    plantInfo = {
        "id": plantID,
	    "latin": latin,
	    "ownerId": ownerId
    }

    if features.get('family') is not None:
        plantInfo["family"] = features['family']
    if features.get('common') is not None:
        plantInfo["common"] = [features['common']]
    if features.get('category') is not None:
        plantInfo["category"] = features['category']
    if features.get('climate') is not None:
        plantInfo["climate"] = features['climate']
    if features.get('origin') is not None:
        plantInfo["origin"] = features['origin']
    if features.get('tempmax') is not None:
        plantInfo["tempmax"] = { "celsius": features['tempmax'], "fahrenheit": features['tempmax']*1.8+32}
    if features.get('tempmin') is not None:
        plantInfo["tempmin"] = { "celsius": features['tempmin'], "fahrenheit": features['tempmin']*1.8+32}
    if features.get('ideallight') is not None:
        plantInfo["ideallight"] = features['ideallight']
    if features.get('toleratedlight') is not None:
        plantInfo["toleratedlight"] = features['toleratedlight']
    if features.get('watering') is not None:
        plantInfo["watering"] = features['watering']
    if features.get('desc') is not None:
        plantInfo["desc"] = features['desc']

    species_name[str(plantID)] = str(latin)
    with open('./data/plantnet300K_species_id_2_name.json', 'w') as species_name_file:
        json.dump(species_name, species_name_file, indent=4)
    
    info.append(plantInfo)
    with open('./data/plant_info.json', 'w') as info_file:
        json.dump(info, info_file, indent=4)  

    image_name[str(plantID)] = image_link
    with open('./data/plant_image.json', 'w') as image_name_file:
        json.dump(image_name, image_name_file, indent=4) 
        
    data = {
    	'isSuccess':  True
    }
    return data

if __name__ == '__main__':
    # Load model
    d = torch.load('./data/plant_weights_best_acc.tar', map_location=torch.device('cpu'))
    model = resnet18(num_classes=1081)
    model.load_state_dict(d['model'])
    app.run(host='0.0.0.0', port=8000)